// Generated by @wagmi/cli@1.1.0 on 9/1/2023 at 2:35:09 PM
import {
  useContractEvent,
  UseContractEventConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
} from "wagmi"
import {
  PrepareWriteContractResult,
  ReadContractResult,
  WriteContractMode,
} from "wagmi/actions"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Foo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const fooABI = [
  {
    stateMutability: "pure",
    type: "function",
    inputs: [{ name: "value", internalType: "uint256", type: "uint256" }],
    name: "id",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMulticall3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMulticall3ABI = [
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      {
        name: "calls",
        internalType: "struct IMulticall3.Call[]",
        type: "tuple[]",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "callData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "aggregate",
    outputs: [
      { name: "blockNumber", internalType: "uint256", type: "uint256" },
      { name: "returnData", internalType: "bytes[]", type: "bytes[]" },
    ],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      {
        name: "calls",
        internalType: "struct IMulticall3.Call3[]",
        type: "tuple[]",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "allowFailure", internalType: "bool", type: "bool" },
          { name: "callData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "aggregate3",
    outputs: [
      {
        name: "returnData",
        internalType: "struct IMulticall3.Result[]",
        type: "tuple[]",
        components: [
          { name: "success", internalType: "bool", type: "bool" },
          { name: "returnData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      {
        name: "calls",
        internalType: "struct IMulticall3.Call3Value[]",
        type: "tuple[]",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "allowFailure", internalType: "bool", type: "bool" },
          { name: "value", internalType: "uint256", type: "uint256" },
          { name: "callData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "aggregate3Value",
    outputs: [
      {
        name: "returnData",
        internalType: "struct IMulticall3.Result[]",
        type: "tuple[]",
        components: [
          { name: "success", internalType: "bool", type: "bool" },
          { name: "returnData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      {
        name: "calls",
        internalType: "struct IMulticall3.Call[]",
        type: "tuple[]",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "callData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "blockAndAggregate",
    outputs: [
      { name: "blockNumber", internalType: "uint256", type: "uint256" },
      { name: "blockHash", internalType: "bytes32", type: "bytes32" },
      {
        name: "returnData",
        internalType: "struct IMulticall3.Result[]",
        type: "tuple[]",
        components: [
          { name: "success", internalType: "bool", type: "bool" },
          { name: "returnData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getBasefee",
    outputs: [{ name: "basefee", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "blockNumber", internalType: "uint256", type: "uint256" }],
    name: "getBlockHash",
    outputs: [{ name: "blockHash", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      { name: "blockNumber", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getChainId",
    outputs: [{ name: "chainid", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [{ name: "coinbase", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [{ name: "difficulty", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [{ name: "gaslimit", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [{ name: "timestamp", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "addr", internalType: "address", type: "address" }],
    name: "getEthBalance",
    outputs: [{ name: "balance", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getLastBlockHash",
    outputs: [{ name: "blockHash", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "requireSuccess", internalType: "bool", type: "bool" },
      {
        name: "calls",
        internalType: "struct IMulticall3.Call[]",
        type: "tuple[]",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "callData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "tryAggregate",
    outputs: [
      {
        name: "returnData",
        internalType: "struct IMulticall3.Result[]",
        type: "tuple[]",
        components: [
          { name: "success", internalType: "bool", type: "bool" },
          { name: "returnData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "requireSuccess", internalType: "bool", type: "bool" },
      {
        name: "calls",
        internalType: "struct IMulticall3.Call[]",
        type: "tuple[]",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "callData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "tryBlockAndAggregate",
    outputs: [
      { name: "blockNumber", internalType: "uint256", type: "uint256" },
      { name: "blockHash", internalType: "bytes32", type: "bytes32" },
      {
        name: "returnData",
        internalType: "struct IMulticall3.Result[]",
        type: "tuple[]",
        components: [
          { name: "success", internalType: "bool", type: "bool" },
          { name: "returnData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PRBTest
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const prbTestABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "err", internalType: "string", type: "string", indexed: false },
    ],
    name: "Log",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "value",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "LogAddress",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "value",
        internalType: "address[]",
        type: "address[]",
        indexed: false,
      },
    ],
    name: "LogArray",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "value", internalType: "bool[]", type: "bool[]", indexed: false },
    ],
    name: "LogArray",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "value",
        internalType: "bytes32[]",
        type: "bytes32[]",
        indexed: false,
      },
    ],
    name: "LogArray",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "value",
        internalType: "int256[]",
        type: "int256[]",
        indexed: false,
      },
    ],
    name: "LogArray",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "value",
        internalType: "string[]",
        type: "string[]",
        indexed: false,
      },
    ],
    name: "LogArray",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "value",
        internalType: "uint256[]",
        type: "uint256[]",
        indexed: false,
      },
    ],
    name: "LogArray",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "value", internalType: "bytes", type: "bytes", indexed: false },
    ],
    name: "LogBytes",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "value",
        internalType: "bytes32",
        type: "bytes32",
        indexed: false,
      },
    ],
    name: "LogBytes32",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "value", internalType: "int256", type: "int256", indexed: false },
    ],
    name: "LogInt256",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "key", internalType: "string", type: "string", indexed: false },
      {
        name: "value",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "LogNamedAddress",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "key", internalType: "string", type: "string", indexed: false },
      {
        name: "value",
        internalType: "address[]",
        type: "address[]",
        indexed: false,
      },
    ],
    name: "LogNamedArray",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "key", internalType: "string", type: "string", indexed: false },
      { name: "value", internalType: "bool[]", type: "bool[]", indexed: false },
    ],
    name: "LogNamedArray",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "key", internalType: "string", type: "string", indexed: false },
      {
        name: "value",
        internalType: "bytes32[]",
        type: "bytes32[]",
        indexed: false,
      },
    ],
    name: "LogNamedArray",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "key", internalType: "string", type: "string", indexed: false },
      {
        name: "value",
        internalType: "int256[]",
        type: "int256[]",
        indexed: false,
      },
    ],
    name: "LogNamedArray",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "key", internalType: "string", type: "string", indexed: false },
      {
        name: "value",
        internalType: "string[]",
        type: "string[]",
        indexed: false,
      },
    ],
    name: "LogNamedArray",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "key", internalType: "string", type: "string", indexed: false },
      {
        name: "value",
        internalType: "uint256[]",
        type: "uint256[]",
        indexed: false,
      },
    ],
    name: "LogNamedArray",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "key", internalType: "string", type: "string", indexed: false },
      { name: "value", internalType: "bytes", type: "bytes", indexed: false },
    ],
    name: "LogNamedBytes",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "key", internalType: "string", type: "string", indexed: false },
      {
        name: "value",
        internalType: "bytes32",
        type: "bytes32",
        indexed: false,
      },
    ],
    name: "LogNamedBytes32",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "key", internalType: "string", type: "string", indexed: false },
      { name: "value", internalType: "int256", type: "int256", indexed: false },
    ],
    name: "LogNamedInt256",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "key", internalType: "string", type: "string", indexed: false },
      { name: "value", internalType: "string", type: "string", indexed: false },
    ],
    name: "LogNamedString",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "key", internalType: "string", type: "string", indexed: false },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "LogNamedUint256",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "value", internalType: "string", type: "string", indexed: false },
    ],
    name: "LogString",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "LogUint256",
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "IS_TEST",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "failed",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fooABI}__.
 */
export function useFooRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof fooABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof fooABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({ abi: fooABI, ...config } as UseContractReadConfig<
    typeof fooABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fooABI}__ and `functionName` set to `"id"`.
 */
export function useFooId<
  TFunctionName extends "id",
  TSelectData = ReadContractResult<typeof fooABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof fooABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: fooABI,
    functionName: "id",
    ...config,
  } as UseContractReadConfig<typeof fooABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({
    abi: iMulticall3ABI,
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBasefee"`.
 */
export function useIMulticall3GetBasefee<
  TFunctionName extends "getBasefee",
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getBasefee",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockHash"`.
 */
export function useIMulticall3GetBlockHash<
  TFunctionName extends "getBlockHash",
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getBlockHash",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockNumber"`.
 */
export function useIMulticall3GetBlockNumber<
  TFunctionName extends "getBlockNumber",
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getBlockNumber",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getChainId"`.
 */
export function useIMulticall3GetChainId<
  TFunctionName extends "getChainId",
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getChainId",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockCoinbase"`.
 */
export function useIMulticall3GetCurrentBlockCoinbase<
  TFunctionName extends "getCurrentBlockCoinbase",
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getCurrentBlockCoinbase",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockDifficulty"`.
 */
export function useIMulticall3GetCurrentBlockDifficulty<
  TFunctionName extends "getCurrentBlockDifficulty",
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getCurrentBlockDifficulty",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockGasLimit"`.
 */
export function useIMulticall3GetCurrentBlockGasLimit<
  TFunctionName extends "getCurrentBlockGasLimit",
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getCurrentBlockGasLimit",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockTimestamp"`.
 */
export function useIMulticall3GetCurrentBlockTimestamp<
  TFunctionName extends "getCurrentBlockTimestamp",
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getCurrentBlockTimestamp",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getEthBalance"`.
 */
export function useIMulticall3GetEthBalance<
  TFunctionName extends "getEthBalance",
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getEthBalance",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getLastBlockHash"`.
 */
export function useIMulticall3GetLastBlockHash<
  TFunctionName extends "getLastBlockHash",
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getLastBlockHash",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iMulticall3ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof iMulticall3ABI, TFunctionName, TMode>({
    abi: iMulticall3ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function useIMulticall3Aggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          "aggregate"
        >["request"]["abi"],
        "aggregate",
        TMode
      > & { functionName?: "aggregate" }
    : UseContractWriteConfig<typeof iMulticall3ABI, "aggregate", TMode> & {
        abi?: never
        functionName?: "aggregate"
      } = {} as any
) {
  return useContractWrite<typeof iMulticall3ABI, "aggregate", TMode>({
    abi: iMulticall3ABI,
    functionName: "aggregate",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function useIMulticall3Aggregate3<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          "aggregate3"
        >["request"]["abi"],
        "aggregate3",
        TMode
      > & { functionName?: "aggregate3" }
    : UseContractWriteConfig<typeof iMulticall3ABI, "aggregate3", TMode> & {
        abi?: never
        functionName?: "aggregate3"
      } = {} as any
) {
  return useContractWrite<typeof iMulticall3ABI, "aggregate3", TMode>({
    abi: iMulticall3ABI,
    functionName: "aggregate3",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function useIMulticall3Aggregate3Value<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          "aggregate3Value"
        >["request"]["abi"],
        "aggregate3Value",
        TMode
      > & { functionName?: "aggregate3Value" }
    : UseContractWriteConfig<
        typeof iMulticall3ABI,
        "aggregate3Value",
        TMode
      > & {
        abi?: never
        functionName?: "aggregate3Value"
      } = {} as any
) {
  return useContractWrite<typeof iMulticall3ABI, "aggregate3Value", TMode>({
    abi: iMulticall3ABI,
    functionName: "aggregate3Value",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function useIMulticall3BlockAndAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          "blockAndAggregate"
        >["request"]["abi"],
        "blockAndAggregate",
        TMode
      > & { functionName?: "blockAndAggregate" }
    : UseContractWriteConfig<
        typeof iMulticall3ABI,
        "blockAndAggregate",
        TMode
      > & {
        abi?: never
        functionName?: "blockAndAggregate"
      } = {} as any
) {
  return useContractWrite<typeof iMulticall3ABI, "blockAndAggregate", TMode>({
    abi: iMulticall3ABI,
    functionName: "blockAndAggregate",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function useIMulticall3TryAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          "tryAggregate"
        >["request"]["abi"],
        "tryAggregate",
        TMode
      > & { functionName?: "tryAggregate" }
    : UseContractWriteConfig<typeof iMulticall3ABI, "tryAggregate", TMode> & {
        abi?: never
        functionName?: "tryAggregate"
      } = {} as any
) {
  return useContractWrite<typeof iMulticall3ABI, "tryAggregate", TMode>({
    abi: iMulticall3ABI,
    functionName: "tryAggregate",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function useIMulticall3TryBlockAndAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          "tryBlockAndAggregate"
        >["request"]["abi"],
        "tryBlockAndAggregate",
        TMode
      > & { functionName?: "tryBlockAndAggregate" }
    : UseContractWriteConfig<
        typeof iMulticall3ABI,
        "tryBlockAndAggregate",
        TMode
      > & {
        abi?: never
        functionName?: "tryBlockAndAggregate"
      } = {} as any
) {
  return useContractWrite<typeof iMulticall3ABI, "tryBlockAndAggregate", TMode>(
    {
      abi: iMulticall3ABI,
      functionName: "tryBlockAndAggregate",
      ...config,
    } as any
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function usePrepareIMulticall3Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function usePrepareIMulticall3Aggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, "aggregate">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: "aggregate",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, "aggregate">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function usePrepareIMulticall3Aggregate3(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, "aggregate3">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: "aggregate3",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, "aggregate3">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function usePrepareIMulticall3Aggregate3Value(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, "aggregate3Value">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: "aggregate3Value",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, "aggregate3Value">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function usePrepareIMulticall3BlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, "blockAndAggregate">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: "blockAndAggregate",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    "blockAndAggregate"
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function usePrepareIMulticall3TryAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, "tryAggregate">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: "tryAggregate",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, "tryAggregate">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function usePrepareIMulticall3TryBlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMulticall3ABI,
      "tryBlockAndAggregate"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: "tryBlockAndAggregate",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    "tryBlockAndAggregate"
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link prbTestABI}__.
 */
export function usePrbTestRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof prbTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof prbTestABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({
    abi: prbTestABI,
    ...config,
  } as UseContractReadConfig<typeof prbTestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link prbTestABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function usePrbTestIsTest<
  TFunctionName extends "IS_TEST",
  TSelectData = ReadContractResult<typeof prbTestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof prbTestABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: prbTestABI,
    functionName: "IS_TEST",
    ...config,
  } as UseContractReadConfig<typeof prbTestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link prbTestABI}__.
 */
export function usePrbTestWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof prbTestABI, string>["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof prbTestABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof prbTestABI, TFunctionName, TMode>({
    abi: prbTestABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link prbTestABI}__ and `functionName` set to `"failed"`.
 */
export function usePrbTestFailed<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof prbTestABI,
          "failed"
        >["request"]["abi"],
        "failed",
        TMode
      > & { functionName?: "failed" }
    : UseContractWriteConfig<typeof prbTestABI, "failed", TMode> & {
        abi?: never
        functionName?: "failed"
      } = {} as any
) {
  return useContractWrite<typeof prbTestABI, "failed", TMode>({
    abi: prbTestABI,
    functionName: "failed",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link prbTestABI}__.
 */
export function usePreparePrbTestWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof prbTestABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: prbTestABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof prbTestABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link prbTestABI}__ and `functionName` set to `"failed"`.
 */
export function usePreparePrbTestFailed(
  config: Omit<
    UsePrepareContractWriteConfig<typeof prbTestABI, "failed">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: prbTestABI,
    functionName: "failed",
    ...config,
  } as UsePrepareContractWriteConfig<typeof prbTestABI, "failed">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__.
 */
export function usePrbTestEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, TEventName>,
    "abi"
  > = {} as any
) {
  return useContractEvent({
    abi: prbTestABI,
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"Log"`.
 */
export function usePrbTestLogEvent(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, "Log">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: "Log",
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, "Log">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogAddress"`.
 */
export function usePrbTestLogAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, "LogAddress">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: "LogAddress",
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, "LogAddress">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogArray"`.
 */
export function usePrbTestLogArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, "LogArray">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: "LogArray",
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, "LogArray">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogBytes"`.
 */
export function usePrbTestLogBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, "LogBytes">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: "LogBytes",
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, "LogBytes">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogBytes32"`.
 */
export function usePrbTestLogBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, "LogBytes32">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: "LogBytes32",
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, "LogBytes32">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogInt256"`.
 */
export function usePrbTestLogInt256Event(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, "LogInt256">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: "LogInt256",
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, "LogInt256">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogNamedAddress"`.
 */
export function usePrbTestLogNamedAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, "LogNamedAddress">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: "LogNamedAddress",
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, "LogNamedAddress">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogNamedArray"`.
 */
export function usePrbTestLogNamedArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, "LogNamedArray">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: "LogNamedArray",
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, "LogNamedArray">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogNamedBytes"`.
 */
export function usePrbTestLogNamedBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, "LogNamedBytes">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: "LogNamedBytes",
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, "LogNamedBytes">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogNamedBytes32"`.
 */
export function usePrbTestLogNamedBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, "LogNamedBytes32">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: "LogNamedBytes32",
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, "LogNamedBytes32">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogNamedInt256"`.
 */
export function usePrbTestLogNamedInt256Event(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, "LogNamedInt256">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: "LogNamedInt256",
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, "LogNamedInt256">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogNamedString"`.
 */
export function usePrbTestLogNamedStringEvent(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, "LogNamedString">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: "LogNamedString",
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, "LogNamedString">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogNamedUint256"`.
 */
export function usePrbTestLogNamedUint256Event(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, "LogNamedUint256">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: "LogNamedUint256",
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, "LogNamedUint256">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogString"`.
 */
export function usePrbTestLogStringEvent(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, "LogString">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: "LogString",
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, "LogString">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link prbTestABI}__ and `eventName` set to `"LogUint256"`.
 */
export function usePrbTestLogUint256Event(
  config: Omit<
    UseContractEventConfig<typeof prbTestABI, "LogUint256">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: prbTestABI,
    eventName: "LogUint256",
    ...config,
  } as UseContractEventConfig<typeof prbTestABI, "LogUint256">)
}
